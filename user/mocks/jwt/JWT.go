// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/adityaeka26/golang-microservices/user/jwt"
	mock "github.com/stretchr/testify/mock"
)

// JWT is an autogenerated mock type for the JWT type
type JWT struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: payload
func (_m *JWT) GenerateToken(payload jwt.Payload) (*string, error) {
	ret := _m.Called(payload)

	var r0 *string
	if rf, ok := ret.Get(0).(func(jwt.Payload) *string); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.Payload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJWT interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWT creates a new instance of JWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWT(t mockConstructorTestingTNewJWT) *JWT {
	mock := &JWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
